{"version":3,"file":"app~d086a389.bundle.js","mappings":";0YACA,kuNAIA,IAAQA,EAAuDC,EAAAA,EAAAA,cAAxCC,EAAwCD,EAAAA,EAAAA,iBAAtBE,EAAsBF,EAAAA,EAAAA,kBAEzDG,GAAYC,EAAAA,EAAAA,IAAOL,EAAeE,EAAkB,CACxDI,QAAO,SAACC,GACNA,EAASC,kBAAkBL,EAAmB,CAAEM,QAAS,MAC3D,IAyBF,QAtB8B,CACtBC,cAAa,SAACC,GAAI,oGACjBA,EAAI,CAAF,gEAIOP,EAAS,uCAAEQ,IAAIT,EAAmBQ,IAAE,0CAL5B,EAMxB,EACME,iBAAgB,WAAG,iHACTT,EAAS,uCAAEU,OAAOX,IAAiB,0CAD1B,EAEzB,EACMY,cAAa,SAACC,GAAY,oGACzBA,EAAWC,eAAe,MAAO,CAAF,gEAGtBb,EAAS,uCAAEc,IAAIf,EAAmBa,IAAU,0CAJ5B,EAKhC,EACMG,iBAAgB,SAACR,GAAI,iHACXP,EAAS,8CAASD,EAAmBQ,IAAE,0CAD5B,EAE3B,mSC/BF,kuNA4CA,QA3C4B,CACpBS,KAAI,YAAsC,oHAEhB,OAFnBC,EAAmB,EAAnBA,oBAAqBL,EAAU,EAAVA,WAChC,EAAKM,qBAAuBD,EAC5B,EAAKE,YAAcP,EAAW,SAExB,EAAKQ,gBAAe,0CAJoB,EAKhD,EAEMA,cAAa,WAAG,kHACV,OAAFb,EAAO,EAAKY,YAAZZ,GAAE,SAEA,EAAKc,mBAAmBd,GAAG,kCACnC,EAAKe,eAAe,sBAEpB,EAAKC,cAAc,0CAND,EAQtB,EACMF,mBAAkB,SAACd,GAAI,uHACPiB,EAAAA,EAAAA,cAAoCjB,GAAG,OAAhD,OAALkB,EAAQ,EAAH,yBACFA,GAAK,0CAFa,EAG7B,EAEAF,YAAW,WAAG,WACZG,KAAKR,qBAAqBS,UAAY,8BAEnBC,SAASC,cAAc,gBAC/BC,iBAAiB,QAAO,YAAE,8FAC7BN,EAAAA,EAAAA,cAAoC,EAAKL,aAAY,OAC3D,EAAKC,gBAAgB,2CAEzB,EAEAE,aAAY,WAAG,WACbI,KAAKR,qBAAqBS,UAAY,mCAEnBC,SAASC,cAAc,gBAC/BC,iBAAiB,QAAO,YAAE,8FAC7BN,EAAAA,EAAAA,iBAAuC,EAAKL,YAAYZ,IAAG,OACjE,EAAKa,gBAAgB,2CAEzB,mSCzCF,8lGAAAW,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,+XAmBA,QAjBgB,eAFhB,EAEgB,GAFhB,EAEgB,UAAG,iFACX,kBAAmBC,UAAS,gBAC2B,OAA3DC,QAAQC,IAAI,+CAA+C,0BAKP,OAA3C,IAAIC,EAAAA,GAAsB,kBAAiB,kBAG9CH,UAAUI,cAAcC,SAAS,kBAAiB,OACxDJ,QAAQC,IAAI,6BAA6B,kDAEzCD,QAAQC,IAAI,oCAAqC,EAAF,IAAS,yDAf5D,+KAiBC,kBAfe","sources":["webpack://restaurant-apps/./src/scripts/utils/favorite-idb.js","webpack://restaurant-apps/./src/scripts/utils/like-button.js","webpack://restaurant-apps/./src/scripts/utils/sw-register.js"],"sourcesContent":["/* eslint-disable no-prototype-builtins */\n/* eslint-disable consistent-return */\nimport { openDB } from 'idb';\nimport CONFIG from '../data/config';\n\nconst { DATABASE_NAME, DATABASE_VERSION, OBJECT_STORE_NAME } = CONFIG;\n\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n  upgrade(database) {\n    database.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\n  },\n});\n\nconst FavoriteRestaurantIdb = {\n  async getRestaurant(id) {\n    if (!id) {\n      return;\n    }\n\n    return (await dbPromise).get(OBJECT_STORE_NAME, id);\n  },\n  async getAllRestaurant() {\n    return (await dbPromise).getAll(OBJECT_STORE_NAME);\n  },\n  async putRestaurant(restaurant) {\n    if (!restaurant.hasOwnProperty('id')) {\n      return;\n    }\n    return (await dbPromise).put(OBJECT_STORE_NAME, restaurant);\n  },\n  async deleteRestaurant(id) {\n    return (await dbPromise).delete(OBJECT_STORE_NAME, id);\n  },\n};\n\nexport default FavoriteRestaurantIdb;\n","import FavoriteRestaurantIdb from './favorite-idb';\n\nconst LikeButtonInitiator = {\n  async init({ likeButtonContainer, restaurant }) {\n    this._likeButtonContainer = likeButtonContainer;\n    this._restaurant = restaurant;\n\n    await this._renderButton();\n  },\n\n  async _renderButton() {\n    const { id } = this._restaurant;\n\n    if (await this._isRestaurantExist(id)) {\n      this._renderLiked();\n    } else {\n      this._renderLike();\n    }\n  },\n  async _isRestaurantExist(id) {\n    const movie = await FavoriteRestaurantIdb.getRestaurant(id);\n    return !!movie;\n  },\n\n  _renderLike() {\n    this._likeButtonContainer.innerHTML = '<i class=\"bi bi-heart\"></i>';\n\n    const likeButton = document.querySelector('.like-button');\n    likeButton.addEventListener('click', async () => {\n      await FavoriteRestaurantIdb.putRestaurant(this._restaurant);\n      this._renderButton();\n    });\n  },\n\n  _renderLiked() {\n    this._likeButtonContainer.innerHTML = '<i class=\"bi bi-heart-fill\"></i>';\n\n    const likeButton = document.querySelector('.like-button');\n    likeButton.addEventListener('click', async () => {\n      await FavoriteRestaurantIdb.deleteRestaurant(this._restaurant.id);\n      this._renderButton();\n    });\n  },\n};\n\nexport default LikeButtonInitiator;\n","/* eslint-disable no-unused-vars */\nimport * as WorkboxWindow from 'workbox-window';\n\nconst swRegister = async () => {\n  if (!('serviceWorker' in navigator)) {\n    console.log('Service Worker not supported in the browser');\n    return;\n  }\n\n  // workbox\n  const wb = new WorkboxWindow.Workbox('./sw.bundle.js');\n\n  try {\n    await navigator.serviceWorker.register('./sw.bundle.js');\n    console.log('Service worker registered');\n  } catch (error) {\n    console.log('Failed to register service worker', error);\n  }\n};\n\nexport default swRegister;\n"],"names":["DATABASE_NAME","CONFIG","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","openDB","upgrade","database","createObjectStore","keyPath","getRestaurant","id","get","getAllRestaurant","getAll","putRestaurant","restaurant","hasOwnProperty","put","deleteRestaurant","init","likeButtonContainer","_likeButtonContainer","_restaurant","_renderButton","_isRestaurantExist","_renderLiked","_renderLike","FavoriteRestaurantIdb","movie","this","innerHTML","document","querySelector","addEventListener","i","navigator","console","log","WorkboxWindow","serviceWorker","register"],"sourceRoot":""}